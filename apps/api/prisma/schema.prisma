// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum StatusLabel {
  PENDING_PAYMENT
  PENDING_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum Role {
  ORGANIZER
  CUSTOMER
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  full_name       String
  role            Role     @default(CUSTOMER)
  points          Int?
  profile_picture String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  events       Event[]
  transactions Transaction[]

  @@map("users")
}

model Event {
  id             String   @id @default(uuid())
  organizer_id   String
  organizer      User     @relation(fields: [organizer_id], references: [id])
  category_id    String
  category       Category @relation(fields: [category_id], references: [id])
  location_id    String
  location       Location @relation(fields: [location_id], references: [id])
  title          String
  start_date     DateTime
  end_date       DateTime
  description    String
  average_rating Int?
  picture        String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  ticket_types TicketType[]
  promotions   Promotion[]
  reviews      Review[]
  transaction  Transaction[]

  @@map("events")
}

model Category {
  id         String   @id @default(uuid())
  label      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  events Event[]

  @@map("categories")
}

model Location {
  id         String   @id @default(uuid())
  label      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  events Event[]

  @@map("locations")
}

model TicketType {
  id              String   @id @default(uuid())
  event_id        String
  event           Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  title           String
  price           Int
  available_seats Int
  start_date      DateTime
  end_date        DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("ticket_types")
}

model Promotion {
  id         String   @id @default(uuid())
  event_id   String
  event      Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  code       String
  amount     Int
  start_date DateTime
  end_date   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("promotions")
}

model Review {
  id             String   @id @default(uuid())
  customer_id    String
  transaction_id String
  event_id       String
  event          Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  rating         Int
  description    String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("reviews")
}

model Transaction {
  id                     String      @id @default(uuid())
  event_id               String
  event                  Event       @relation(fields: [event_id], references: [id])
  customer_id            String
  customer               User        @relation(fields: [customer_id], references: [id])
  status                 StatusLabel @default(PENDING_PAYMENT)
  points_used            Int         @default(0)
  promotion_id           String?
  grand_total            Int
  payment_proof          String?
  payment_proof_deadline DateTime
  acceptance_deadline    DateTime?
  created_at             DateTime    @default(now())
  updated_at             DateTime    @updatedAt

  TransactionTickets TransactionTicket[]

  @@map("transactions")
}

model TransactionTicket {
  id             String      @id @default(uuid())
  transaction_id String
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  ticket_id      String
  quantity       Int

  @@map("transaction_tickets")
}
